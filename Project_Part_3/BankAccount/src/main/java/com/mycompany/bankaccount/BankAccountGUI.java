/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bankaccount;

import java.util.ArrayList;
import java.util.Map;


/**
 *
 * @author alyazzie
 */
public class BankAccountGUI extends javax.swing.JFrame {
    
    DBAccount dbAccount;
    DBBankAcct bank;
    ArrayList<AccountHolder> accountHolders;
    ArrayList<BankAccount> bankAccounts;
    Map<Integer, ArrayList<BankAccount>> acctdef;
    
   /**
     * Creates new form BankAccount
     * @param accountHolders
     * @param bankAccounts
     * @param acctdef
     * @param dbAccount
     * @param bank
     */

    public BankAccountGUI(DBAccount dbAccount,DBBankAcct bank,ArrayList<AccountHolder> accountHolders, 
            ArrayList<BankAccount> bankAccounts,Map<Integer, ArrayList<BankAccount>> acctdef) 
    {          
        this.dbAccount = dbAccount;
        this.bank = bank;
        this.accountHolders = accountHolders;
        this.bankAccounts = bankAccounts;
        this.acctdef = acctdef;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ddlGreeting = new javax.swing.JComboBox<>();
        btnOkay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtWelcome = new javax.swing.JTextArea();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Welcome to Java Bank!");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        ddlGreeting.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "New Customer", "Existing Customer" }));
        ddlGreeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlGreetingActionPerformed(evt);
            }
        });
        getContentPane().add(ddlGreeting, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, 160, -1));

        btnOkay.setText("Ok");
        btnOkay.setSelected(true);
        btnOkay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkayActionPerformed(evt);
            }
        });
        getContentPane().add(btnOkay, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 180, -1, -1));

        txtWelcome.setEditable(false);
        txtWelcome.setColumns(20);
        txtWelcome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtWelcome.setLineWrap(true);
        txtWelcome.setRows(5);
        txtWelcome.setText("Welcome to the Java Bank! We're happy you have choosen our bank. Please select an option from the drop down meun below and click \"OK\".");
        txtWelcome.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtWelcome);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 260, -1));

        btnExit.setText("Close");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 282, 100, 30));

        setSize(new java.awt.Dimension(432, 337));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkayActionPerformed
        String selection = ddlGreeting.getSelectedItem().toString();
        
        if (selection.toLowerCase().contains("new")) {
            CreateAccountHolderGUI dialog = new CreateAccountHolderGUI();
            dialog.setVisible(true);
                    
            ArrayList<Object> objs = dialog.returnObjs();
            for(Object obj: objs)
            {
                if(obj instanceof AccountHolder)
                   dbAccount.create((AccountHolder) obj);                  
                else
                   bank.create((BankAccount) obj);             
            }
            
            dialog.close();
            // show account created 
            updateData();
            
        } else {
            ExistingCustomerMenuGUI existingCust = new ExistingCustomerMenuGUI(dbAccount,bank,accountHolders,bankAccounts,acctdef);
            existingCust.setVisible(true);
            updateData();          
        }
    }//GEN-LAST:event_btnOkayActionPerformed

    private void ddlGreetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlGreetingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ddlGreetingActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        
    }//GEN-LAST:event_btnExitActionPerformed

    private void updateData()
    {
        dbAccount.read(accountHolders);
        bank.read(bankAccounts);
        tieAccounts(accountHolders,bankAccounts,acctdef);          
    }
    
    // updates the tree map
    private static void tieAccounts(ArrayList<AccountHolder> accountHolders, ArrayList<BankAccount> bankAccounts, Map<Integer, ArrayList<BankAccount>> acctDef) {
        for (AccountHolder holder : accountHolders) {
            ArrayList<BankAccount> tiedAccounts = searchBankAccountMap(bankAccounts, holder.getCustomerId());
            acctDef.put(holder.getCustomerId(), tiedAccounts);
        }
    }
    
    // Search Bank Account method, returns array of bank accounts
    private static ArrayList<BankAccount> searchBankAccountMap(ArrayList<BankAccount> bankAccounts, int holderID) {
        ArrayList<BankAccount> tiedAccounts = new ArrayList<>();
        for (BankAccount bankAccount : bankAccounts) {
            if (bankAccount.getHolderID() == holderID)
                tiedAccounts.add(bankAccount);
        }
        return tiedAccounts;
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOkay;
    private javax.swing.JComboBox<String> ddlGreeting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtWelcome;
    // End of variables declaration//GEN-END:variables
}
