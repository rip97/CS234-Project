/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bankaccount;

import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Map;

/**
 *
 * @author alyazzie
 */
public class ExistingCustomerMenuGUI extends javax.swing.JDialog {
    
    DBAccount dbAccount;
    DBBankAcct bank;
    ArrayList<AccountHolder> accountHolders;
    ArrayList<BankAccount> bankAccounts;
    Map<Integer, ArrayList<BankAccount>> acctdef;
    
    /**
     * Creates new form BankAccount
     * @param accountHolders
     * @param bankAccounts
     * @param acctdef
     * @param dbAccount
     * @param bank
     */ 
    
    public ExistingCustomerMenuGUI(DBAccount dbAccount,DBBankAcct bank,ArrayList<AccountHolder> accountHolders, 
            ArrayList<BankAccount> bankAccounts,Map<Integer, ArrayList<BankAccount>> acctdef) {
        super((java.awt.Frame) null, true);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        initComponents();
        
        this.dbAccount = dbAccount;
        this.bank = bank;
        this.accountHolders = accountHolders;
        this.bankAccounts = bankAccounts;
        this.acctdef = acctdef;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngroupExistCust = new javax.swing.ButtonGroup();
        lblHeader = new javax.swing.JLabel();
        btnOkay = new javax.swing.JButton();
        btnDeposit = new javax.swing.JRadioButton();
        btnWithdraw = new javax.swing.JRadioButton();
        btnUpdateAccount = new javax.swing.JRadioButton();
        btnCloseIndividual = new javax.swing.JRadioButton();
        btnCloseAll = new javax.swing.JRadioButton();
        btnPrint = new javax.swing.JRadioButton();
        btnCreate = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCustomerID = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHeader.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        lblHeader.setText("What would you like to do today?");
        getContentPane().add(lblHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 100, -1, -1));

        btnOkay.setText("Ok");
        btnOkay.setSelected(true);
        btnOkay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkayActionPerformed(evt);
            }
        });
        getContentPane().add(btnOkay, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 394, -1, -1));

        btngroupExistCust.add(btnDeposit);
        btnDeposit.setText("Deposit");
        getContentPane().add(btnDeposit, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 175, -1, -1));

        btngroupExistCust.add(btnWithdraw);
        btnWithdraw.setText("Withdraw");
        getContentPane().add(btnWithdraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 207, -1, -1));

        btngroupExistCust.add(btnUpdateAccount);
        btnUpdateAccount.setText("Update Account Information");
        getContentPane().add(btnUpdateAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 242, -1, -1));

        btngroupExistCust.add(btnCloseIndividual);
        btnCloseIndividual.setText("Close Individual Account");
        getContentPane().add(btnCloseIndividual, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 277, -1, -1));

        btngroupExistCust.add(btnCloseAll);
        btnCloseAll.setText("Close All Accounts");
        getContentPane().add(btnCloseAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 312, -1, -1));

        btngroupExistCust.add(btnPrint);
        btnPrint.setText("Print All Account Info");
        getContentPane().add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 353, -1, -1));

        btnCreate.setText("Open new Account");
        getContentPane().add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 140, -1, -1));

        jLabel1.setText("Customer ID:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 61, -1, -1));

        jLabel2.setText("Please Enter your CustomerID below:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 28, -1, -1));
        getContentPane().add(txtCustomerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 56, 135, -1));

        btnExit.setText("Close");
        btnExit.setSelected(true);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 394, -1, -1));

        setSize(new java.awt.Dimension(304, 457));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkayActionPerformed
        
        if(!txtCustomerID.getText().isEmpty())
        {          
                     
            int holderID = Integer.parseInt(txtCustomerID.getText());
            AccountHolder holder = searchAccountHolders(this.accountHolders, holderID);
            if(holder != null)
            {
                if (btnCreate.isSelected()) 
                {                    
                    setVisible(false);
                    CreateAccountTypeGUI newAcct = new CreateAccountTypeGUI(holder.getCustomerId());
                    newAcct.setVisible(true);
                    // update the map
                    this.bank.create(newAcct.getAccount());                                                                        
                } 
                else if (btnDeposit.isSelected()) 
                {
                   InitializeDepositWithdrawGUI depositWithdraw = new InitializeDepositWithdrawGUI(1, this.bankAccounts, this.bank);
                   setVisible(false);
                   depositWithdraw.setVisible(true);
                   depositWithdraw.dispose();
                   
                } 
                else if (btnWithdraw.isSelected()) 
                {
                   InitializeDepositWithdrawGUI depositWithdraw = new InitializeDepositWithdrawGUI(2, this.bankAccounts, this.bank);
                   setVisible(false);
                   depositWithdraw.setVisible(true);
                   depositWithdraw.dispose();
                } 

                else if (btnUpdateAccount.isSelected()) 
                {
                    // update account holder info 
                    BankAccountInformationGUI update = new BankAccountInformationGUI(holder,this.dbAccount);
                    update.setVisible(true);
                    update.dispose();
                    
                } 
                else if (btnCloseIndividual.isSelected()) 
                {   
                    // close a single bank account 
                    CloseAccount close = new CloseAccount(this.bankAccounts,this.bank,holder.getCustomerId());
                    close.setVisible(true);
                    close.dispose();
                     

                } 
                else if(btnCloseAll.isSelected()){
                        
                    // close all account and account holder 
                    CloseAll closeAll = new CloseAll(this.acctdef,this.bank,this.dbAccount);
                    closeAll.setVisible(true);
                    closeAll.dispose();                      
                }
                else
                {
                    // print accounts with map 
                    ViewAllAccountsGUI viewAccounts = new ViewAllAccountsGUI(holderID,holder,this.acctdef);
                    viewAccounts.setVisible(true);                   
                }
                
                dispose();
            }
            else
                JOptionPane.showMessageDialog(null, "That ID doesn't exist!");
        }
        else
            JOptionPane.showMessageDialog(null, "No customer ID inputed. Please enter an ID.");     
    }//GEN-LAST:event_btnOkayActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed
    
    // search method for accountHolders 
    private AccountHolder searchAccountHolders(ArrayList<AccountHolder> accountHolders, int customerId) {
        for (AccountHolder holder: accountHolders) {
            if (holder.getCustomerId() == customerId) {
                return holder;
            }
        }
        return null;
    }
    
    // Search Bank Account method, returns array of bank accounts
    private static ArrayList<BankAccount> searchBankAccountMap(ArrayList<BankAccount> bankAccounts, int holderID) {
        ArrayList<BankAccount> tiedAccounts = new ArrayList<>();
        for (BankAccount bankAccount : bankAccounts) {
            if (bankAccount.getHolderID() == holderID)
                tiedAccounts.add(bankAccount);
            if(bankAccount instanceof IRA)
            {
                System.out.println(((IRA)bankAccount).getBirthDate());
            }
        }
        return tiedAccounts;
    }
    
    // updates the tree map
    public static void tieAccounts(ArrayList<AccountHolder> accountHolders, ArrayList<BankAccount> bankAccounts, Map<Integer, ArrayList<BankAccount>> acctDef) {
        for (AccountHolder holder : accountHolders) {
            ArrayList<BankAccount> tiedAccounts = searchBankAccountMap(bankAccounts, holder.getCustomerId());
            acctDef.put(holder.getCustomerId(), tiedAccounts);
        }
    }
    
    
    private void update()
    {
        this.dbAccount.read(this.accountHolders);
        bank.read(bankAccounts);
        tieAccounts(this.accountHolders,this.bankAccounts,this.acctdef);     
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnCloseAll;
    private javax.swing.JRadioButton btnCloseIndividual;
    private javax.swing.JRadioButton btnCreate;
    private javax.swing.JRadioButton btnDeposit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnOkay;
    private javax.swing.JRadioButton btnPrint;
    private javax.swing.JRadioButton btnUpdateAccount;
    private javax.swing.JRadioButton btnWithdraw;
    private javax.swing.ButtonGroup btngroupExistCust;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JTextField txtCustomerID;
    // End of variables declaration//GEN-END:variables
}
